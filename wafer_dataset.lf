target Python {
    keepalive: true
}

preamble {=
import pandas as pd
import time

filename = "D1.csv"                                                         # Il nuovo dataset è D1.csv
wafer_data = None
wafer_number = None                                                         # Variabile globale per il numero del wafer
row = 0                                                                     # Variabile globale per tracciare a che riga sono arrivato

def read_csv():
    global wafer_data                                                       # Variabile globale per i dati del wafer
    try:
        wafer_data = pd.read_csv(filename, sep=",", header=0)
        print(f"File '{filename}' caricato correttamente.")                 # Stampa un messaggio di successo
    except FileNotFoundError:
        print(f"Errore: File '{filename}' non trovato.")                    # Se il file non viene trovato, stampa un messaggio di errore
        wafer_data = None
    except Exception as e:
        print(f"Errore durante il caricamento del file: {e}")               # Notifica di altri errori durante il caricamento del file
        wafer_data = None

def get_phase_data(index, start, end):                                      # Per leggere le 15 feature devo passare start = 1 e end = 15
    global wafer_data                                                       # Variabile globale per i dati del wafer
    if wafer_data is None:
        read_csv()
    if wafer_data is not None and index < len(wafer_data):
        nome = wafer_data.iloc[index, 0]                                    # Nome del wafer
        data = wafer_data.iloc[index, start:end+1].tolist()                 # Dati della feature specificata
        return nome, data
    return None, []

def get_wafer_status(index):                                                # Posso non considerare questa funzione al momento
    global wafer_data
    if wafer_data is not None and index < len(wafer_data):
        try:
            return int(wafer_data.iloc[index, -1])
        except:
            return -1
    return -1

def get_wafer_number(index, col):                                                  # Index è l'indice della riga, col è la colonna da cui leggere il numero del wafer
    global wafer_number
    if wafer_number is None or wafer_number == 2866 or wafer_number == 1677:       # Se il wafer è 2866 o 2867, non lo considero
        read_csv()
    if wafer_number is not None:
        try:
            wafer_number = int(wafer_data.iloc[index, col])                        # Leggo il numero del wafer che sarà sempre in colonna 0
            return wafer_number
        except:
            print(f"Errore nella lettura del numero del wafer alla riga {index}, colonna {col}.")
            return None

def get_wafer_rows(start_row):
    global wafer_data
    if wafer_data is None or start_row >= len(wafer_data):
        return [], start_row
    current_wafer = wafer_data.iloc[start_row, 0]                                           # Prendo il numero del wafer dalla riga di partenza
    start_row = row                                                                         # Trovo la riga di partenza per il wafer specificato

    while (end_row < len(wafer_data) and wafer_data.iloc[end_row, 0] == current_wafer):     # Scorro le righe fino a trovare un wafer diverso
        end_row += 1

    wafer_block = wafer_data.iloc[start_row:end_row]                                        # Prendo il blocco di dati del wafer
    return wafer_block, end_row                                                             # Restituisco il blocco di dati del wafer e l'indice da cui ripartire
=}

reactor Fase(col_start=0, col_end=0, durata_col=2) {
    input start_flag
    input wafer_index
    input wafer_number
    output end_flag

    reaction(start_flag, wafer_index) -> end_flag {=
        start = wafer_index.value                                                                                                  # Ottengo la riga del wafer corrente
        wafer_rows, new_index = get_wafer_rows(start)                                                                              # Ottengo le righe del wafer corrente

        if wafer_rows is None or wafer_rows.empty:                                                                                 # Stampe di errore
            print("Nessun wafer trovato.")
            end_flag.set(1)
            return
        
        wafer_number = get_wafer_number(wafer_index.value, 0)                                                                      # Numero del wafer corrente

        for i, row in wafer_rows.iterrow():                                                                                        # Scorro le righe del wafer corrente
            time.sleep(self.durata_col)                                                                                            # Simulo il tempo di elaborazione della fase
            feature = get_phase_data(index + i, self.col_start, self.col_end).tolist()                                             # Leggo i dati del wafer corrente
            print(f"Wafer {wafer_number} - Feature: {[float(x) for x in features]}")        # Stampo i dati del wafer corrente
        end_flag.set(1)
    =}
}

main reactor {
    state wafer_index = 0                                                   # Indice del wafer corrente
    state fase = 1                                                          # Fase corrente, inizia da 1

    #f1m = new Fase(col_start=3, col_end=17, durata_col=2)                   # Fase -1 con le feaure che vanno da colonna 3 a colonna 17, la durata è a colonna 2 
    f1 = new Fase(col_start=3, col_end=17, durata_col=2)                    # Fase 1 con le feaure che vanno da colonna 3 a colonna 17, la durata è a colonna 2
    #f2m = new Fase(col_start=3, col_end=17, durata_col=2)                   # Fase -2 con le feaure che vanno da colonna 3 a colonna 17, la durata è a colonna 2
    f2 = new Fase(col_start=3, col_end=17, durata_col=2)                    # Fase 2 con le feaure che vanno da colonna 3 a colonna 17, la durata è a colonna 2
    f4 = new Fase(col_start=3, col_end=17, durata_col=2)                    # Fase 4 con le feaure che vanno da colonna 3 a colonna 17, la durata è a colonna 2
    f6 = new Fase(col_start=3, col_end=17, durata_col=2)                    # Fase 6 con le feaure che vanno da colonna 3 a colonna 17, la durata è a colonna 2
    f7 = new Fase(col_start=3, col_end=17, durata_col=2)                    # Fase 7 con le feaure che vanno da colonna 3 a colonna 17, la durata è a colonna 2                      

    logical action next_step

    reaction(startup) -> next_step {=
        read_csv()
        print("Inizio produzione wafer")
        self.fase = 1
        self.wafer_index = 0
        next_step.schedule(0)
    =}

    reaction(next_step) -> f1.start_flag, f1.wafer_index {=
        if self.fase == 1:
            f1.wafer_index.set(self.wafer_index)
            f1.start_flag.set(1)
    =}
    reaction(f1.end_flag) -> next_step {=
        if self.fase == 1:
            self.fase = 2
            next_step.schedule(0)
    =}

    reaction(next_step) -> f2.start_flag, f2.wafer_index {=
        if self.fase == 2:
            f2.wafer_index.set(self.wafer_index)
            f2.start_flag.set(1)
    =}
    reaction(f2.end_flag) -> next_step {=
        if self.fase == 2:
            self.fase = 4
            next_step.schedule(0)
    =}

    reaction(next_step) -> f4.start_flag, f4.wafer_index {=
        if self.fase == 4:
            f4.wafer_index.set(self.wafer_index)
            f4.start_flag.set(1)
    =}
    reaction(f4.end_flag) -> next_step {=
        if self.fase == 4:
            self.fase = 6
            next_step.schedule(0)
    =}

    reaction(next_step) -> f6.start_flag, f6.wafer_index {=
        if self.fase == 6:
            f6.wafer_index.set(self.wafer_index)
            f6.start_flag.set(1)
    =}
    reaction(f6.end_flag) -> next_step {=
        if self.fase == 6:
            self.fase = 7
            next_step.schedule(0)
    =}

    reaction(next_step) -> f7.start_flag, f7.wafer_index {=
        if self.fase == 7:
            f7.wafer_index.set(self.wafer_index)
            f7.start_flag.set(1)
    =}
    reaction(f7.end_flag) -> next_step {=
        if self.fase == 7:
            print(f"Produzione completata per wafer {self.wafer_index}.")
            self.wafer_index += 1
            self.fase = 1
            global wafer_data
            if wafer_data is not None and self.wafer_index < len(wafer_data):
                next_step.schedule(0)
            else:
                print("Tutti i wafer sono stati processati.")
    =}
}
